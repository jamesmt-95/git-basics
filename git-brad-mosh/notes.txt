Working Directory > Staging Area > Local Repository > Remote Repository

######### Configuring Git #########

> git config --global user.name "Your Name"
> git config --global user.email "youremail@yourdomain.com"

    #Set default editor 
    Many Git commands will launch a text editor to prompt for further input.
    One of the most common use cases for git config is configuring which editor Git should use.
    > git config --global core.editor "code --wait" //for VSCode
        #Note:
        --wait flag allows Git Bash to Wait for your editor to close the file...

    #To check/update global configuration setting
    > git config --global -e //this will open .gitconfig file


######### Basic Git Commands #########

> git init
Initialize local repository. This will create a .git folder


> git add <file> (This step is also known as 'Stage Changes')
Add files to Staging Area(also called Index), to make them ready for commit.

    > git add * (all files)
    > git add . (all files)
    > git add *.html (all .html files)

    #To remove file(s) from Staging Area, which is exists in work env.
    >git rm --cached <file> (Unstage)

    #To remove a file from both Working env and Staging Area
    > git rm <file1 file2>

    #To remove a file from Staging Area, which is deleted from the work env.
    > git add <file>


> git status (flag -s for short status)
Check the status of working tree (staging area)
U - Untracked
M - Modified
A - Added

    #commit hash (also known as commit ID)

> git commit (Commit also known as Snapshot)
Commit changes to Index. (Commit from Staging area to local repository)

    > git commit -m 'Commit Message' - Easiest way to commit


> git checkout <prev-commit-id> 
Move to previous commit


######### Git branches #########

> git branch <branch-name>
To create a branch

> git branch
To list all branches


> git checkout <branch-name>
To use the newely created branch


> git branch -d <branch-name>
To delete a branch locally


> git push origin --delete <remote-branch-name>
To delete a remote branch


> git merge <branch-name> -m 'commit-message'
To merge branch to master, when you are in <master> branch


#gitignore
Specifies intentionally untracked files to ignore.

> touch .gitignore - create a file '.gitignore'
> then add files to .gitignore

    To ignore a already Staged file,
    > First, remove the file from Staging Area (git rm --cached <file>), then add the file in .gitignore

######### Following cmd's are related to Remote Repo. #########

> git push
Push from local repository to Remote repository.


> git pull
Pull latest changes from remote repository.


> git clone
Clone repository into a new directory.
    Create a new folder
    > git clone https://github.com/jamesmt-95/mern-stack.git


> git remote add origin https://github.com/jamesmt-95/mern-stack.git
To verify that the remote repository was added to your configuration


> git push -u origin master
To upload local repository content to a remote repository


 ########## README.md file describes the project ##########
 https://levelup.gitconnected.com/github-readme-cheatsheet-617dff61fa23



 ########## Viewing the staged & Unstaged changes ##########

 #To see what we have in the Staging Area
 > git diff --staged

  #To see what we have in the Working Directory
 > git diff


 ########## Viewing the commit history ##########

    #To see all the history of commit
    > git log

    #Logs including all the commits done on all branches
    > git log --all ()


 ########## Restore specified paths in the working tree / Index (Staging Area) ##########

 > git restore <file>  // working tree (working directory)

 > git restore --staged <file>  // Index (Staging Area)

> git restore . // Restore all files in working tree




########## HEAD vs master  ##########
#HEAD is a pointer/label to the most recent commit of the branch you are currently on. 
 HEAD points out the latest commit in the currently checkedout branch.

#master is the default branch created when you initialized a git repository (e.g. > git init).

You can delete the master branch (e.g. git branch -D master). But You cannot delete the HEAD pointer.